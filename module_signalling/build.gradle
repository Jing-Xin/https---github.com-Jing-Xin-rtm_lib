plugins {
    id 'com.android.library'
    id 'kotlin-android'
}

android {
    compileSdk 31

    defaultConfig {
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    lintOptions{ abortOnError false }
}


dependencies {

    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
//    implementation files('libs/fastjson-1.2.76.jar')
//    implementation files('libs/Java-WebSocket-1.5.2.jar')
//    implementation files('libs/gson-2.8.9.jar')
//    implementation files('libs/slf4j-api-2.0.0-alpha5.jar')
//    implementation files('libs/fastjson-1.2.76.jar')
//    implementation files('libs/Java-WebSocket-1.5.2.jar')
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation "org.java-websocket:Java-WebSocket:1.5.2"
    implementation 'com.alibaba:fastjson:1.2.76'


}



task makeJar( type: Jar) {
//删除存在的
    delete 'build/libs/rtm.jar'
    archiveName 'rtm.jar'//目标jar包名称
//设置拷贝的文件
    from(project.zipTree('build/intermediates/aar_main_jar/release/classes.jar'))//此行很重要，否则该项目编写的代码无法打进jar包，具体路径与gradle版本有关，//之前网上说的都是老版本的路径，害我浪费半天时间
    from(project.zipTree("libs/Java-WebSocket-1.5.2.jar"))//第三方jar包
//    from(project.zipTree("libs/fastjson-1.2.76.jar"))//第三方jar包
    from(project.zipTree("libs/gson-2.8.9.jar")) //第三方jar，是需要打包进入我这个printer包的
    from(project.zipTree("libs/slf4j-api-2.0.0-alpha5.jar")) //第三方jar，是需要打包进入我这个printer包的
    include('com/**')
    include('**/')
    exclude ('com.mize.signalling/BuildConfig.class')//需排除一些无用文件
    exclude ('com.mize.signalling/BuildConfig\$*.class')
    //打进jar包后的文件目录
    destinationDir=file('build/libs')
}
makeJar.dependsOn(build)